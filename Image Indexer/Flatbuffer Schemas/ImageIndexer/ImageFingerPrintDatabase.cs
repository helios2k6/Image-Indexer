// automatically generated by the FlatBuffers compiler, do not modify

namespace ImageIndexer
{

using System;
using FlatBuffers;

public sealed class ImageFingerPrintDatabase : Table {
  public static ImageFingerPrintDatabase GetRootAsImageFingerPrintDatabase(ByteBuffer _bb) { return GetRootAsImageFingerPrintDatabase(_bb, new ImageFingerPrintDatabase()); }
  public static ImageFingerPrintDatabase GetRootAsImageFingerPrintDatabase(ByteBuffer _bb, ImageFingerPrintDatabase obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public ImageFingerPrintDatabase __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public ImageFingerPrint GetFingerprints(int j) { return GetFingerprints(new ImageFingerPrint(), j); }
  public ImageFingerPrint GetFingerprints(ImageFingerPrint obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int FingerprintsLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<ImageFingerPrintDatabase> CreateImageFingerPrintDatabase(FlatBufferBuilder builder,
      VectorOffset fingerprintsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ImageFingerPrintDatabase.AddFingerprints(builder, fingerprintsOffset);
    return ImageFingerPrintDatabase.EndImageFingerPrintDatabase(builder);
  }

  public static void StartImageFingerPrintDatabase(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFingerprints(FlatBufferBuilder builder, VectorOffset fingerprintsOffset) { builder.AddOffset(0, fingerprintsOffset.Value, 0); }
  public static VectorOffset CreateFingerprintsVector(FlatBufferBuilder builder, Offset<ImageFingerPrint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartFingerprintsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ImageFingerPrintDatabase> EndImageFingerPrintDatabase(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ImageFingerPrintDatabase>(o);
  }
  public static void FinishImageFingerPrintDatabaseBuffer(FlatBufferBuilder builder, Offset<ImageFingerPrintDatabase> offset) { builder.Finish(offset.Value); }
};


}
