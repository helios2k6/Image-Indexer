// automatically generated by the FlatBuffers compiler, do not modify

namespace ImageIndexer
{

    using FlatBuffers;

    internal sealed class FrameFingerPrint : Table
    {
        public static FrameFingerPrint GetRootAsFrameFingerPrint(ByteBuffer _bb) { return GetRootAsFrameFingerPrint(_bb, new FrameFingerPrint()); }
        public static FrameFingerPrint GetRootAsFrameFingerPrint(ByteBuffer _bb, FrameFingerPrint obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public FrameFingerPrint __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

        public int FrameNumber { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
        public Macroblock GetMacroblocks(int j) { return GetMacroblocks(new Macroblock(), j); }
        public Macroblock GetMacroblocks(Macroblock obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
        public int MacroblocksLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }

        public static Offset<FrameFingerPrint> CreateFrameFingerPrint(FlatBufferBuilder builder,
            int frameNumber = 0,
            VectorOffset macroblocksOffset = default(VectorOffset))
        {
            builder.StartObject(2);
            FrameFingerPrint.AddMacroblocks(builder, macroblocksOffset);
            FrameFingerPrint.AddFrameNumber(builder, frameNumber);
            return FrameFingerPrint.EndFrameFingerPrint(builder);
        }

        public static void StartFrameFingerPrint(FlatBufferBuilder builder) { builder.StartObject(2); }
        public static void AddFrameNumber(FlatBufferBuilder builder, int frameNumber) { builder.AddInt(0, frameNumber, 0); }
        public static void AddMacroblocks(FlatBufferBuilder builder, VectorOffset macroblocksOffset) { builder.AddOffset(1, macroblocksOffset.Value, 0); }
        public static VectorOffset CreateMacroblocksVector(FlatBufferBuilder builder, Offset<Macroblock>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static void StartMacroblocksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FrameFingerPrint> EndFrameFingerPrint(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<FrameFingerPrint>(o);
        }
    };


}
