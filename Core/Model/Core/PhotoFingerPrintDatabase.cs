// automatically generated by the FlatBuffers compiler, do not modify

namespace Core
{

    using System;
    using FlatBuffers;

    public sealed class PhotoFingerPrintDatabase : Table
    {
        public static PhotoFingerPrintDatabase GetRootAsPhotoFingerPrintDatabase(ByteBuffer _bb) { return GetRootAsPhotoFingerPrintDatabase(_bb, new PhotoFingerPrintDatabase()); }
        public static PhotoFingerPrintDatabase GetRootAsPhotoFingerPrintDatabase(ByteBuffer _bb, PhotoFingerPrintDatabase obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public PhotoFingerPrintDatabase __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

        public PhotoFingerPrint GetFingerPrints(int j) { return GetFingerPrints(new PhotoFingerPrint(), j); }
        public PhotoFingerPrint GetFingerPrints(PhotoFingerPrint obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
        public int FingerPrintsLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

        public static Offset<PhotoFingerPrintDatabase> CreatePhotoFingerPrintDatabase(FlatBufferBuilder builder,
            VectorOffset FingerPrintsOffset = default(VectorOffset))
        {
            builder.StartObject(1);
            PhotoFingerPrintDatabase.AddFingerPrints(builder, FingerPrintsOffset);
            return PhotoFingerPrintDatabase.EndPhotoFingerPrintDatabase(builder);
        }

        public static void StartPhotoFingerPrintDatabase(FlatBufferBuilder builder) { builder.StartObject(1); }
        public static void AddFingerPrints(FlatBufferBuilder builder, VectorOffset FingerPrintsOffset) { builder.AddOffset(0, FingerPrintsOffset.Value, 0); }
        public static VectorOffset CreateFingerPrintsVector(FlatBufferBuilder builder, Offset<PhotoFingerPrint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static void StartFingerPrintsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<PhotoFingerPrintDatabase> EndPhotoFingerPrintDatabase(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<PhotoFingerPrintDatabase>(o);
        }
        public static void FinishPhotoFingerPrintDatabaseBuffer(FlatBufferBuilder builder, Offset<PhotoFingerPrintDatabase> offset) { builder.Finish(offset.Value); }
    };


}
