// automatically generated by the FlatBuffers compiler, do not modify

namespace Core
{

    using System;
    using FlatBuffers;

    internal struct VideoFingerPrintDatabase : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static VideoFingerPrintDatabase GetRootAsVideoFingerPrintDatabase(ByteBuffer _bb) { return GetRootAsVideoFingerPrintDatabase(_bb, new VideoFingerPrintDatabase()); }
        public static VideoFingerPrintDatabase GetRootAsVideoFingerPrintDatabase(ByteBuffer _bb, VideoFingerPrintDatabase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
        public VideoFingerPrintDatabase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public VideoFingerPrint? VideoFingerPrints(int j) { int o = __p.__offset(4); return o != 0 ? (VideoFingerPrint?)(new VideoFingerPrint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int VideoFingerPrintsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<VideoFingerPrintDatabase> CreateVideoFingerPrintDatabase(FlatBufferBuilder builder,
            VectorOffset videoFingerPrintsOffset = default(VectorOffset))
        {
            builder.StartObject(1);
            VideoFingerPrintDatabase.AddVideoFingerPrints(builder, videoFingerPrintsOffset);
            return VideoFingerPrintDatabase.EndVideoFingerPrintDatabase(builder);
        }

        public static void StartVideoFingerPrintDatabase(FlatBufferBuilder builder) { builder.StartObject(1); }
        public static void AddVideoFingerPrints(FlatBufferBuilder builder, VectorOffset videoFingerPrintsOffset) { builder.AddOffset(0, videoFingerPrintsOffset.Value, 0); }
        public static VectorOffset CreateVideoFingerPrintsVector(FlatBufferBuilder builder, Offset<VideoFingerPrint>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static void StartVideoFingerPrintsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<VideoFingerPrintDatabase> EndVideoFingerPrintDatabase(FlatBufferBuilder builder)
        {
            int o = builder.EndObject();
            return new Offset<VideoFingerPrintDatabase>(o);
        }
        public static void FinishVideoFingerPrintDatabaseBuffer(FlatBufferBuilder builder, Offset<VideoFingerPrintDatabase> offset) { builder.Finish(offset.Value); }
    };


}
